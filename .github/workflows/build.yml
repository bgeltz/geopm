#
#  Copyright (c) 2015 - 2022, Intel Corporation
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#
#      * Redistributions of source code must retain the above copyright
#        notice, this list of conditions and the following disclaimer.
#
#      * Redistributions in binary form must reproduce the above copyright
#        notice, this list of conditions and the following disclaimer in
#        the documentation and/or other materials provided with the
#        distribution.
#
#      * Neither the name of Intel Corporation nor the names of its
#        contributors may be used to endorse or promote products derived
#        from this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY LOG OF THE USE
#  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

name: C/C++ CI

on:
  push:
    branches:
      - dev
      - release-v2.0-candidate
  pull_request:
    branches:
      - dev
      - release-v2.0-candidate

concurrency:
  group: ci-${{ github.ref }}-${{ github.head_ref }}
  cancel-in-progress: true

jobs:
  # build_and_test:
  #   name: "build_and_test: ${{ matrix.config.name }} ${{ matrix.debug-flag }}"
  #   runs-on: ubuntu-20.04
  #   strategy:
  #     matrix:
  #       config:
  #       - {
  #         name: clang-12,
  #         cc: "clang-12", cxx: "clang++-12"
  #       }
  #       - {
  #         name: gcc-9,
  #         cc: "gcc-9", cxx: "g++-9"
  #       }
  #       python-version: [3.7]
  #       debug-flag: ["enable-debug", "disable-debug"]
  #   env:
  #     CC: ${{ matrix.config.cc }}
  #     CXX: ${{ matrix.config.cxx }}
  #     FC: gfortran-9
  #     F77: gfortran-9

  #   steps:
  #   - uses: actions/checkout@v2
  #   - uses: actions/setup-python@v2
  #     with:
  #       python-version: ${{ matrix.python-version }}
  #   - name: install system dependencies
  #     run: sudo apt-get update && sudo apt-get install libelf-dev mpich libmpich-dev libomp-11-dev libsystemd-dev libgirepository1.0-dev
  #   - name: install base and service dir python dependencies
  #     run: |
  #          python3 -m pip install --upgrade pip setuptools wheel pep517
  #          python3 -m pip install -r service/requirements.txt
  #          python3 -m pip install -r scripts/requirements.txt
    # - name: check include guards
    #   shell: bash
    #   run: .github/include_guards.sh
    # - name: configure service dir
    #   working-directory: service
    #   run: ./autogen.sh && ./configure --${{ matrix.debug-flag }}
    # - name: make service dir
    #   working-directory: service
    #   run: make -j2
    # - name: configure base dir
    #   run: ./autogen.sh && ./configure --enable-beta --disable-openmp --with-geopmd-lib=./service/.libs --with-geopmd-include=./service/src --${{ matrix.debug-flag }}
    # - name: make base dir
    #   run: make -j2
    # - name: make checkprogs service
    #   working-directory: service
    #   run: make checkprogs -j2
    # - name: make checkprogs base dir
    #   run: make checkprogs -j2
    # - name: make check service
    #   working-directory: service
    #   env:
    #     LD_LIBRARY_PATH: .libs:${LD_LIBRARY_PATH}
    #   run: make check
    # - name: make check basedir
    #   run: make check
    #   env:
    #     LD_LIBRARY_PATH: .libs:./service/.libs:${LD_LIBRARY_PATH}
    #     PYTHONPATH: scripts:${PYTHONPATH}
    # - name: test-dist
    #   run: ./copying_headers/test-dist
    # - name: show failure logs
    #   if: ${{ failure() }}
    #   run: |
    #        cat scripts/py3k_lint.log || true
    #        cat scripts/test/pytest_links/*.log || true
    #        cat service/geopmdpy_test/pytest_links/*.log || true
    #        cat test/gtest_links/*.log || true
    #        cat service/test/gtest_links/*.log || true
  print_context:
    runs-on: ubuntu-latest
    steps:
      - env:
          EVENT_CONTEXT: ${{ toJSON(github.event) }}
          EVENT_NAME: ${{ toJSON(github.event_name) }}
        run: |
          echo $EVENT_CONTEXT
          echo $EVENT_NAME
          echo "BRG Branch = ${{ github.ref_name }}"
  publish_obs:
    if: github.event_name == 'push'
    name: "publish_obs"
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        config:
        - {
          name: gcc-9,
          cc: "gcc-9", cxx: "g++-9"
        }
        python-version: [3.7]
    env:
      CC: ${{ matrix.config.cc }}
      CXX: ${{ matrix.config.cxx }}
      OSC_CREDENTIALS: ${{ secrets.OSC_CREDENTIALS }}
      OSC_USER: ${{ github.actor }}
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: set osc credentials
      run: |
           echo -e "[general]\n\n[https://api.opensuse.org]\ncredentials_mgr_class=osc.credentials.ObfuscatedConfigFileCredentialsManager" > ~/.oscrc
           echo "user = ${OSC_USER}" >> ~/.oscrc
           echo "pass = ${OSC_CREDENTIALS}" >> ~/.oscrc
    - name: install system dependencies
      run: sudo apt-get update && sudo apt-get install libsystemd-dev libgirepository1.0-dev osc python3-m2crypto
    - name: install base and service dir python dependencies
      run: |
           python3 -m pip install --upgrade pip setuptools wheel pep517
           python3 -m pip install -r service/requirements.txt

    - name: configure service dir
      working-directory: service
      run: ./autogen.sh && ./configure
    - name: make service dist
      working-directory: service
      run: make -j2 dist

    - name: Publish RC
      working-directory: service
      if: github.ref_name == 'release-v2.0-candidate'
      env:
        OSC_PACKAGE: home:${{ github.actor }}:${{ github.ref_name }}/geopm-service
      run: |
           osc co ${OSC_PACKAGE}
           cp geopm-service.spec ${OSC_PACKAGE}
           cp geopm-service*.tar.gz ${OSC_PACKAGE}/geopm-service.tar.gz
           osc add ${OSC_PACKAGE}/geopm-service.spec ${OSC_PACKAGE}/geopm-service.tar.gz
           osc ci -m ${{ github.sha }} ${OSC_PACKAGE}

    - name: Publish dev
      working-directory: service
      if: github.ref_name == 'dev'
      env:
        OSC_PACKAGE: home:${{ github.actor }}/geopm-service
      run: |
           osc co ${OSC_PACKAGE}
           cp geopm-service.spec ${OSC_PACKAGE}
           cp geopm-service*.tar.gz ${OSC_PACKAGE}/geopm-service.tar.gz
           osc add ${OSC_PACKAGE}/geopm-service.spec ${OSC_PACKAGE}/geopm-service.tar.gz
           osc ci -m ${{ github.sha }} ${OSC_PACKAGE}

